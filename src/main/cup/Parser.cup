package ch.ffhs.ti.umk.skript.parser;

import java.util.ArrayList;
import java_cup.runtime.*;
import ch.ffhs.ti.umk.skript.instr.*;



terminal PLUS, MINUS, TIMES, DIV, MOD, POW, IF, EQ, LT, GT, GTE, LTE, WHILE, LBRA, RBRA, FUN;
terminal ASSIGN, LPAR, RPAR, SEP;

terminal String NUMBER;
terminal String NAME;

non terminal Instruction SCRIPT;
non terminal ArrayList<Instruction> STATEMENT_LIST;
non terminal Instruction ASSIGNMENT;
non terminal Instruction STATEMENT;
non terminal Instruction SUM, PRODUCT, POWER, SIMPLE_TERM;
non terminal InstructionCondition CONDITION;
non terminal Instruction IF_STATEMENT;
non terminal Instruction WHILE_STATEMENT;
non terminal Instruction BLOCK, BLOCK_RETURN;
non terminal Instruction FUNCTION;
non terminal Instruction FUNCTION_CALL;
non terminal ConditionOperator CONDITION_OPARATOR;
non terminal ENDE;


start with SCRIPT;
      
SCRIPT ::= STATEMENT_LIST:al SUM:s ENDE
                         {: RESULT = new InstructionScript(al, s); :}
                      ;

BLOCK ::= LBRA SEP STATEMENT_LIST:s RBRA SEP {: RESULT = new InstructionBlock(s); :};

BLOCK_RETURN ::= LBRA SEP STATEMENT_LIST:sl SUM:s SEP RBRA SEP {: RESULT = new InstructionBlock(sl, s); :};

               
STATEMENT_LIST ::=
                   {:  RESULT = new ArrayList<Instruction>(); :}
                |  STATEMENT_LIST:al STATEMENT:a 
                   {:  RESULT = al;
                       RESULT.add(a); 
                   :}
                ;
                
ENDE ::= 
     |  SEP
     ;

STATEMENT ::= ASSIGNMENT:s {: RESULT = s; :} | IF_STATEMENT:s {: RESULT = s; :} | WHILE_STATEMENT:s {: RESULT = s; :} | FUNCTION:s {: RESULT = s; :};

ASSIGNMENT ::= NAME:n ASSIGN SUM:s SEP
                {: RESULT = new InstructionSetVariable(n, s); :}
              ;


           
       
SUM ::= PRODUCT:p
        {: RESULT = p; :}
     |  MINUS PRODUCT:p
        {: RESULT = new InstructionNegate(p); :}
     |  SUM:s PLUS PRODUCT:p
        {: RESULT = new InstructionBinaryOperation(BinaryOperator.PLUS, s, p); :}
     |  SUM:s MINUS PRODUCT:p
        {: RESULT = new InstructionBinaryOperation(BinaryOperator.MINUS, s, p); :}
     ;
     
PRODUCT ::= POWER:pp
            {: RESULT = pp; :}
         |  PRODUCT:p TIMES POWER:pp
            {: RESULT = new InstructionBinaryOperation(BinaryOperator.TIMES, p, pp); :}
         |  PRODUCT:p DIV POWER:pp
            {: RESULT = new InstructionBinaryOperation(BinaryOperator.DIV, p, pp); :}
         |  PRODUCT:p MOD POWER:pp
            {: RESULT = new InstructionBinaryOperation(BinaryOperator.MOD, p, pp); :}
         ;
                    
POWER ::= SIMPLE_TERM:st
          {: RESULT = st; :}
        | SIMPLE_TERM:st POW POWER:pp
          {: RESULT = new InstructionBinaryOperation(BinaryOperator.POW, st, pp); :}
        ;
        
SIMPLE_TERM ::= NAME:n
                {: RESULT = new InstructionGetVariable(n); :}
             |  NUMBER:n
                {: RESULT = InstructionConstant.integer(n); :}
             |  LPAR SUM:s RPAR
                {: RESULT = s; :}
             | FUNCTION_CALL:f {: RESULT = f; :}
             ;


CONDITION_OPARATOR ::= EQ {: RESULT = ConditionOperator.EQ; :} 
                     | GT {: RESULT = ConditionOperator.GT; :} 
                     | LT  {: RESULT = ConditionOperator.LT; :} 
                     | GTE  {: RESULT = ConditionOperator.GTE; :} 
                     | LTE {: RESULT = ConditionOperator.LTE; :};

CONDITION ::= SUM:a CONDITION_OPARATOR:operator SUM:b 
               {: RESULT = new InstructionCondition(operator, a, b); :}
               ;

IF_STATEMENT ::= IF LPAR CONDITION:c RPAR BLOCK:s
                  {: RESULT = new InstructionIf(c, s); :}
                  ;
         
WHILE_STATEMENT ::= WHILE LPAR CONDITION:c RPAR BLOCK:b
                  {: RESULT = new InstructionWhile(c, b); :}
                  ;


FUNCTION_CALL ::= NAME:n LPAR RPAR
                  {: RESULT = new InstructionFunctionCall(n); :}
                  ;
FUNCTION ::= FUN NAME:n LPAR RPAR BLOCK_RETURN:b
                  {: RESULT = new InstructionFunction(n, b); :}
                  ;