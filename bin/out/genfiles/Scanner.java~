// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: grammars/Scanner.flex

package ch.ffhs.ti.yannis.skript.parser;

import static ch.ffhs.ti.yannis.skript.parser.Terminals.*;
import java_cup.runtime.Symbol;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  private static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  private static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00\1\u4f00"+
    "\1\u5000\1\u5100\3\u0100\1\u5200\1\u5300\1\u5400\12\u1f00\4\u0100"+
    "\1\u5500\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100\1\u5700\1\u5800"+
    "\2\u1f00\1\u5900\1\u5a00\27\u0100\1\u5b00\2\u0100\1\u5c00\45\u1f00"+
    "\1\u0100\1\u5d00\1\u5e00\11\u1f00\1\u5f00\24\u1f00\1\u6000\1\u6100"+
    "\1\u1f00\1\u6200\1\u6300\1\u6400\1\u6500\2\u1f00\1\u6600\5\u1f00"+
    "\1\u6700\1\u6800\1\u6900\5\u1f00\1\u6a00\1\u6b00\2\u1f00\1\u6c00"+
    "\1\u1f00\1\u6d00\21\u1f00\246\u0100\1\u6e00\20\u0100\1\u6f00\1\u7000"+
    "\25\u0100\1\u7100\34\u0100\1\u7200\14\u1f00\2\u0100\1\u7300\u0b05\u1f00"+
    "\1\u7400\1\u7500\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\16\0\4\4\1\1"+
    "\3\4\1\5\1\6\2\4\1\7\1\10\1\11\1\12"+
    "\1\4\1\13\1\4\1\14\12\15\1\16\2\4\1\17"+
    "\3\4\32\5\4\4\1\5\1\4\32\5\4\4\6\0"+
    "\1\20\32\0\2\4\4\5\4\4\1\5\2\4\1\0"+
    "\7\4\1\5\4\4\1\5\5\4\27\5\1\4\37\5"+
    "\1\4\u01ca\5\4\4\14\5\16\4\5\5\7\4\1\5"+
    "\1\4\1\5\21\4\160\0\5\5\1\4\2\5\2\4"+
    "\4\5\1\4\1\5\6\4\1\5\1\4\3\5\1\4"+
    "\1\5\1\4\24\5\1\4\123\5\1\4\213\5\1\4"+
    "\5\0\2\4\246\5\1\4\46\5\2\4\1\5\6\4"+
    "\51\5\6\4\1\5\1\4\55\0\1\4\1\0\1\4"+
    "\2\0\1\4\2\0\1\4\1\0\10\4\33\5\4\4"+
    "\4\5\15\4\6\0\5\4\1\5\4\4\13\0\1\4"+
    "\1\0\3\4\53\5\37\0\4\4\2\5\1\0\143\5"+
    "\1\4\1\5\10\0\1\4\6\0\2\5\2\0\1\4"+
    "\4\0\2\5\12\0\3\5\2\4\1\5\17\4\1\0"+
    "\1\5\1\0\36\5\33\0\2\4\131\5\13\0\1\5"+
    "\16\4\12\0\41\5\11\0\2\5\4\4\1\5\2\4"+
    "\1\0\30\5\4\0\1\5\11\0\1\5\3\0\1\5"+
    "\5\0\22\4\31\5\3\0\4\4\13\5\65\4\25\5"+
    "\1\4\10\5\25\4\61\0\66\5\3\0\1\5\22\0"+
    "\1\5\7\0\12\5\2\0\2\4\12\0\1\4\20\5"+
    "\3\0\1\4\10\5\2\4\2\5\2\4\26\5\1\4"+
    "\7\5\1\4\1\5\3\4\4\5\2\4\1\0\1\5"+
    "\7\0\2\4\2\0\2\4\3\0\1\5\10\4\1\0"+
    "\4\4\2\5\1\4\3\5\2\0\2\4\12\0\4\5"+
    "\7\4\2\5\1\4\1\0\2\4\3\0\1\4\6\5"+
    "\4\4\2\5\2\4\26\5\1\4\7\5\1\4\2\5"+
    "\1\4\2\5\1\4\2\5\2\4\1\0\1\4\5\0"+
    "\4\4\2\0\2\4\3\0\3\4\1\0\7\4\4\5"+
    "\1\4\1\5\7\4\14\0\3\5\1\0\13\4\3\0"+
    "\1\4\11\5\1\4\3\5\1\4\26\5\1\4\7\5"+
    "\1\4\2\5\1\4\5\5\2\4\1\0\1\5\10\0"+
    "\1\4\3\0\1\4\3\0\2\4\1\5\17\4\2\5"+
    "\2\0\2\4\12\0\1\4\1\5\7\4\1\5\6\0"+
    "\1\4\3\0\1\4\10\5\2\4\2\5\2\4\26\5"+
    "\1\4\7\5\1\4\2\5\1\4\5\5\2\4\1\0"+
    "\1\5\7\0\2\4\2\0\2\4\3\0\10\4\2\0"+
    "\4\4\2\5\1\4\3\5\2\0\2\4\12\0\1\4"+
    "\1\5\20\4\1\0\1\5\1\4\6\5\3\4\3\5"+
    "\1\4\4\5\3\4\2\5\1\4\1\5\1\4\2\5"+
    "\3\4\2\5\3\4\3\5\3\4\14\5\4\4\5\0"+
    "\3\4\3\0\1\4\4\0\2\4\1\5\6\4\1\0"+
    "\16\4\12\0\11\4\1\5\6\4\5\0\10\5\1\4"+
    "\3\5\1\4\27\5\1\4\20\5\3\4\1\5\7\0"+
    "\1\4\3\0\1\4\4\0\7\4\2\0\1\4\3\5"+
    "\5\4\2\5\2\0\2\4\12\0\20\4\1\5\3\0"+
    "\1\4\10\5\1\4\3\5\1\4\27\5\1\4\12\5"+
    "\1\4\5\5\2\4\1\0\1\5\7\0\1\4\3\0"+
    "\1\4\4\0\7\4\2\0\7\4\1\5\1\4\2\5"+
    "\2\0\2\4\12\0\1\4\2\5\15\4\4\0\1\4"+
    "\10\5\1\4\3\5\1\4\51\5\2\0\1\5\7\0"+
    "\1\4\3\0\1\4\4\0\1\5\5\4\3\5\1\0"+
    "\7\4\3\5\2\0\2\4\12\0\12\4\6\5\2\4"+
    "\2\0\1\4\22\5\3\4\30\5\1\4\11\5\1\4"+
    "\1\5\2\4\7\5\3\4\1\0\4\4\6\0\1\4"+
    "\1\0\1\4\10\0\6\4\12\0\2\4\2\0\15\4"+
    "\60\5\1\0\2\5\7\0\4\4\10\5\10\0\1\4"+
    "\12\0\47\4\2\5\1\4\1\5\1\4\5\5\1\4"+
    "\30\5\1\4\1\5\1\4\12\5\1\0\2\5\11\0"+
    "\1\5\2\4\5\5\1\4\1\5\1\4\6\0\2\4"+
    "\12\0\2\4\4\5\40\4\1\5\27\4\2\0\6\4"+
    "\12\0\13\4\1\0\1\4\1\0\1\4\1\0\4\4"+
    "\2\0\10\5\1\4\44\5\4\4\24\0\1\4\2\0"+
    "\5\5\13\0\1\4\44\0\11\4\1\0\71\4\53\5"+
    "\24\0\1\5\12\0\6\4\6\5\4\0\4\5\3\0"+
    "\1\5\3\0\2\5\7\0\3\5\4\0\15\5\14\0"+
    "\1\5\17\0\2\4\46\5\1\4\1\5\5\4\1\5"+
    "\2\4\53\5\1\4\115\5\1\4\4\5\2\4\7\5"+
    "\1\4\1\5\1\4\4\5\2\4\51\5\1\4\4\5"+
    "\2\4\41\5\1\4\4\5\2\4\7\5\1\4\1\5"+
    "\1\4\4\5\2\4\17\5\1\4\71\5\1\4\4\5"+
    "\2\4\103\5\2\4\3\0\40\4\20\5\20\4\126\5"+
    "\2\4\6\5\3\4\u016c\5\2\4\21\5\1\4\32\5"+
    "\5\4\113\5\3\4\13\5\7\4\15\5\1\4\4\5"+
    "\3\0\13\4\22\5\3\0\13\4\22\5\2\0\14\4"+
    "\15\5\1\4\3\5\1\4\2\0\14\4\64\5\40\0"+
    "\3\4\1\5\3\4\2\5\1\0\2\4\12\0\41\4"+
    "\4\0\1\4\12\0\6\4\131\5\7\4\5\5\2\0"+
    "\42\5\1\0\1\5\5\4\106\5\12\4\37\5\1\4"+
    "\14\0\4\4\14\0\12\4\12\0\36\5\2\4\5\5"+
    "\13\4\54\5\4\4\32\5\6\4\12\0\46\4\27\5"+
    "\5\0\4\4\65\5\12\0\1\4\35\0\2\4\13\0"+
    "\6\4\12\0\15\4\1\5\10\4\16\0\102\4\5\0"+
    "\57\5\21\0\7\5\4\4\12\0\21\4\11\0\14\4"+
    "\3\0\36\5\15\0\2\5\12\0\54\5\16\0\14\4"+
    "\44\5\24\0\10\4\12\0\3\4\3\5\12\0\44\5"+
    "\2\4\11\5\7\4\53\5\2\4\3\5\20\4\3\0"+
    "\1\4\25\0\4\5\1\0\6\5\1\0\2\5\3\0"+
    "\1\5\5\4\300\5\72\0\1\4\5\0\26\5\2\4"+
    "\6\5\2\4\46\5\2\4\6\5\2\4\10\5\1\4"+
    "\1\5\1\4\1\5\1\4\1\5\1\4\37\5\2\4"+
    "\65\5\1\4\7\5\1\4\1\5\3\4\3\5\1\4"+
    "\7\5\3\4\4\5\2\4\6\5\4\4\15\5\5\4"+
    "\3\5\1\4\7\5\16\4\5\0\30\4\2\3\5\0"+
    "\20\4\2\5\23\4\1\5\13\4\5\0\1\4\12\0"+
    "\1\4\1\5\15\4\1\5\20\4\15\5\3\4\40\5"+
    "\20\4\15\0\4\4\1\0\3\4\14\0\21\4\1\5"+
    "\4\4\1\5\2\4\12\5\1\4\1\5\3\4\5\5"+
    "\6\4\1\5\1\4\1\5\1\4\1\5\1\4\4\5"+
    "\1\4\13\5\2\4\4\5\5\4\5\5\4\4\1\5"+
    "\21\4\51\5\u0177\4\57\5\1\4\57\5\1\4\205\5"+
    "\6\4\4\5\3\0\2\5\14\4\46\5\1\4\1\5"+
    "\5\4\1\5\2\4\70\5\7\4\1\5\17\4\1\0"+
    "\27\5\11\4\7\5\1\4\7\5\1\4\7\5\1\4"+
    "\7\5\1\4\7\5\1\4\7\5\1\4\7\5\1\4"+
    "\7\5\1\4\40\0\57\4\1\5\325\4\3\5\31\4"+
    "\11\5\6\0\1\4\5\5\2\4\5\5\4\4\126\5"+
    "\2\4\2\0\2\4\3\5\1\4\132\5\1\4\4\5"+
    "\5\4\53\5\1\4\136\5\21\4\33\5\65\4\306\5"+
    "\112\4\360\5\20\4\215\5\103\4\56\5\2\4\15\5"+
    "\3\4\20\5\12\0\2\5\24\4\57\5\1\0\4\4"+
    "\12\0\1\4\37\5\2\0\120\5\2\0\45\4\11\5"+
    "\2\4\147\5\2\4\65\5\2\4\5\5\60\4\13\5"+
    "\1\0\3\5\1\0\4\5\1\0\27\5\5\0\20\4"+
    "\1\5\7\4\64\5\14\4\2\0\62\5\22\0\12\4"+
    "\12\0\6\4\22\0\6\5\3\4\1\5\1\4\2\5"+
    "\13\0\34\5\10\0\2\4\27\5\15\0\14\4\35\5"+
    "\3\4\4\0\57\5\16\0\16\4\1\5\12\0\6\4"+
    "\5\5\1\0\12\5\12\0\5\5\1\4\51\5\16\0"+
    "\11\4\3\5\1\0\10\5\2\0\2\4\12\0\6\4"+
    "\27\5\3\4\1\5\3\0\62\5\1\0\1\5\3\0"+
    "\2\5\2\0\5\5\2\0\1\5\1\0\1\5\30\4"+
    "\3\5\2\4\13\5\5\0\2\4\3\5\2\0\12\4"+
    "\6\5\2\4\6\5\2\4\6\5\11\4\7\5\1\4"+
    "\7\5\1\4\53\5\1\4\14\5\10\4\163\5\10\0"+
    "\1\4\2\0\2\4\12\0\6\4\244\5\14\4\27\5"+
    "\4\4\61\5\4\4\u0100\3\156\5\2\4\152\5\46\4"+
    "\7\5\14\4\5\5\5\4\1\5\1\0\12\5\1\4"+
    "\15\5\1\4\5\5\1\4\1\5\1\4\2\5\1\4"+
    "\2\5\1\4\154\5\41\4\153\5\22\4\100\5\2\4"+
    "\66\5\50\4\15\5\3\4\20\0\20\4\20\0\3\4"+
    "\2\5\30\4\3\5\31\4\1\5\6\4\5\5\1\4"+
    "\207\5\2\4\1\0\4\4\1\5\13\4\12\0\7\4"+
    "\32\5\4\4\1\5\1\4\32\5\13\4\131\5\3\4"+
    "\6\5\2\4\6\5\2\4\6\5\2\4\3\5\3\4"+
    "\2\5\3\4\2\5\22\4\3\0\4\4\14\5\1\4"+
    "\32\5\1\4\23\5\1\4\2\5\1\4\17\5\2\4"+
    "\16\5\42\4\173\5\105\4\65\5\210\4\1\0\202\4"+
    "\35\5\3\4\61\5\17\4\1\0\37\4\40\5\15\4"+
    "\36\5\5\4\46\5\5\0\5\4\36\5\2\4\44\5"+
    "\4\4\10\5\1\4\5\5\52\4\236\5\2\4\12\0"+
    "\6\4\44\5\4\4\44\5\4\4\50\5\10\4\64\5"+
    "\234\4\67\5\11\4\26\5\12\4\10\5\230\4\6\5"+
    "\2\4\1\5\1\4\54\5\1\4\2\5\3\4\1\5"+
    "\2\4\27\5\12\4\27\5\11\4\37\5\101\4\23\5"+
    "\1\4\2\5\12\4\26\5\12\4\32\5\106\4\70\5"+
    "\6\4\2\5\100\4\1\5\3\0\1\4\2\0\5\4"+
    "\4\0\4\5\1\4\3\5\1\4\35\5\2\4\3\0"+
    "\4\4\1\0\40\4\35\5\3\4\35\5\43\4\10\5"+
    "\1\4\34\5\2\0\31\4\66\5\12\4\26\5\12\4"+
    "\23\5\15\4\22\5\156\4\111\5\67\4\63\5\15\4"+
    "\63\5\15\4\44\5\4\0\10\4\12\0\306\4\35\5"+
    "\12\4\1\5\10\4\26\5\13\0\217\4\27\5\11\4"+
    "\3\0\65\5\17\0\37\4\12\0\17\4\4\0\55\5"+
    "\13\0\2\4\1\0\17\4\1\0\2\4\31\5\7\4"+
    "\12\0\6\4\3\0\44\5\16\0\1\4\12\0\4\4"+
    "\1\5\2\0\11\4\43\5\1\0\2\4\1\5\11\4"+
    "\3\0\60\5\16\0\4\5\4\4\4\0\3\4\12\0"+
    "\1\5\1\4\1\5\43\4\22\5\1\4\31\5\14\0"+
    "\6\4\1\0\101\4\7\5\1\4\1\5\1\4\4\5"+
    "\1\4\17\5\1\4\12\5\7\4\57\5\14\0\5\4"+
    "\12\0\6\4\4\0\1\4\10\5\2\4\2\5\2\4"+
    "\26\5\1\4\7\5\1\4\2\5\1\4\5\5\1\4"+
    "\2\0\1\5\7\0\2\4\2\0\2\4\3\0\2\4"+
    "\1\5\6\4\1\0\5\4\5\5\2\0\2\4\7\0"+
    "\3\4\5\0\213\4\65\5\22\0\4\5\5\4\12\0"+
    "\4\4\1\0\1\5\40\4\60\5\24\0\2\5\1\4"+
    "\1\5\10\4\12\0\246\4\57\5\7\0\2\4\11\0"+
    "\27\4\4\5\2\0\42\4\60\5\21\0\3\4\1\5"+
    "\13\4\12\0\46\4\53\5\15\0\1\5\7\4\12\0"+
    "\66\4\33\5\2\4\17\0\4\4\12\0\306\4\54\5"+
    "\17\0\145\4\100\5\12\0\25\4\1\5\240\4\10\5"+
    "\2\4\47\5\7\0\2\4\7\0\1\5\1\4\1\5"+
    "\1\0\33\4\1\5\12\0\50\5\7\0\1\5\4\0"+
    "\10\4\1\0\10\4\1\5\13\0\56\5\20\0\3\4"+
    "\1\5\42\4\71\5\7\4\11\5\1\4\45\5\10\0"+
    "\1\4\10\0\1\5\17\4\12\0\30\4\36\5\2\4"+
    "\26\0\1\4\16\0\111\4\7\5\1\4\2\5\1\4"+
    "\46\5\6\0\3\4\1\0\1\4\2\0\1\4\7\0"+
    "\1\5\1\0\10\4\12\0\6\4\6\5\1\4\2\5"+
    "\1\4\40\5\5\0\1\4\2\0\1\4\5\0\1\5"+
    "\7\4\12\0\u0136\4\23\5\4\0\346\4\4\5\37\4"+
    "\232\5\146\4\157\5\21\4\304\5\274\4\57\5\1\4"+
    "\11\0\307\4\107\5\271\4\71\5\7\4\37\5\1\4"+
    "\12\0\146\4\36\5\2\4\5\0\13\4\60\5\7\0"+
    "\11\4\4\5\14\4\12\0\11\4\25\5\5\4\23\5"+
    "\260\4\100\5\200\4\113\5\4\4\1\0\1\5\67\0"+
    "\7\4\4\0\15\5\100\4\2\5\1\4\1\5\34\4"+
    "\370\5\10\4\363\5\15\4\37\5\61\4\3\5\21\4"+
    "\4\5\10\4\u018c\5\4\4\153\5\5\4\15\5\3\4"+
    "\11\5\7\4\12\5\3\4\2\0\1\4\4\0\301\4"+
    "\5\0\3\4\26\0\2\4\7\0\36\4\4\0\224\4"+
    "\3\0\273\4\125\5\1\4\107\5\1\4\2\5\2\4"+
    "\1\5\2\4\2\5\2\4\4\5\1\4\14\5\1\4"+
    "\1\5\1\4\7\5\1\4\101\5\1\4\4\5\2\4"+
    "\10\5\1\4\7\5\1\4\34\5\1\4\4\5\1\4"+
    "\5\5\1\4\1\5\3\4\7\5\1\4\u0154\5\2\4"+
    "\31\5\1\4\31\5\1\4\37\5\1\4\31\5\1\4"+
    "\37\5\1\4\31\5\1\4\37\5\1\4\31\5\1\4"+
    "\37\5\1\4\31\5\1\4\10\5\2\4\151\0\4\4"+
    "\62\0\10\4\1\0\16\4\1\0\26\4\5\0\1\4"+
    "\17\0\120\4\7\0\1\4\21\0\2\4\7\0\1\4"+
    "\2\0\1\4\5\0\325\4\55\5\3\4\7\0\7\5"+
    "\2\4\12\0\4\4\1\5\u0171\4\54\5\16\0\5\4"+
    "\306\5\13\4\7\0\51\4\104\5\7\0\1\5\4\4"+
    "\12\0\u0156\4\1\5\117\4\4\5\1\4\33\5\1\4"+
    "\2\5\1\4\1\5\2\4\1\5\1\4\12\5\1\4"+
    "\4\5\1\4\1\5\1\4\1\5\6\4\1\5\4\4"+
    "\1\5\1\4\1\5\1\4\1\5\1\4\3\5\1\4"+
    "\2\5\1\4\1\5\2\4\1\5\1\4\1\5\1\4"+
    "\1\5\1\4\1\5\1\4\1\5\1\4\2\5\1\4"+
    "\1\5\2\4\4\5\1\4\7\5\1\4\4\5\1\4"+
    "\4\5\1\4\1\5\1\4\12\5\1\4\21\5\5\4"+
    "\3\5\1\4\5\5\1\4\21\5\104\4\327\5\51\4"+
    "\65\5\13\4\336\5\2\4\u0182\5\16\4\u0131\5\37\4"+
    "\36\5\343\4\1\0\36\4\140\0\200\4\360\0\20\4";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[30208];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\1\1\15\1\2"+
    "\1\16";

  private static int [] zzUnpackAction() {
    int [] result = new int[17];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\21\0\42\0\63\0\104\0\21\0\21\0\21"+
    "\0\125\0\21\0\21\0\146\0\167\0\210\0\21\0\231"+
    "\0\21";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[17];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\2\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\2"+
    "\23\0\1\3\21\0\1\4\16\0\1\5\4\0\1\5"+
    "\7\0\1\5\2\0\1\5\11\0\1\17\23\0\1\20"+
    "\21\0\1\15\22\0\1\21\1\0\2\20\2\0\14\20"+
    "\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\3\11\1\1\2\11\3\1\1\11"+
    "\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[17];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

    private Symbol sym(int type)
    {
         return new Symbol(type, yyline, yycolumn);
    }

    private Symbol symVal(int type)
    {
         return new Symbol(type, yyline, yycolumn, yytext());
    }
   


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  private final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  private final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  private final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  private final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  private final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  private final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  private final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  private final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Terminals.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new RuntimeException("Illegal Symbol '" + yytext() + '\''
             + " in line " + yyline + ", column" + yycolumn);
            }
            // fall through
          case 15: break;
          case 2:
            { 
            }
            // fall through
          case 16: break;
          case 3:
            { return sym(SEP);
            }
            // fall through
          case 17: break;
          case 4:
            { return symVal(NAME);
            }
            // fall through
          case 18: break;
          case 5:
            { return sym(MOD);
            }
            // fall through
          case 19: break;
          case 6:
            { return sym(LPAR);
            }
            // fall through
          case 20: break;
          case 7:
            { return sym(RPAR);
            }
            // fall through
          case 21: break;
          case 8:
            { return sym(TIMES);
            }
            // fall through
          case 22: break;
          case 9:
            { return sym(PLUS);
            }
            // fall through
          case 23: break;
          case 10:
            { return sym(MINUS);
            }
            // fall through
          case 24: break;
          case 11:
            { return sym(DIV);
            }
            // fall through
          case 25: break;
          case 12:
            { return symVal(NUMBER);
            }
            // fall through
          case 26: break;
          case 13:
            { return sym(POW);
            }
            // fall through
          case 27: break;
          case 14:
            { return sym(ASSIGN);
            }
            // fall through
          case 28: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
